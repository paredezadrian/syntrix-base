---
alwaysApply: true
description: >-
  Automation workflow: upon the phrase "Please proceed by implementing the project",
  commit each time a file is finalized; on any edit or new chat start, check git status
  and perform proper actions; at new chat start, read all Cursor rules and ensure
  the Python virtual environment is active.
---

### Workflow Automation Rule

- **Trigger phrase policy**: When the user writes exactly (case-insensitive)
  "Please proceed by implementing the project":
  - Commit after finalizing each file. Treat a file as "finalized" when you complete a coherent edit to that file.
  - Use Conventional Commits for clarity (e.g., `feat:`, `fix:`, `docs:`, `chore:`).

- **Git hygiene on edits and new chats**:
  - Before making edits, and whenever a new chat begins:
    - Run `git status` and ensure a clean working tree or commit pending changes.
    - If the repository is not initialized, initialize with main as default and set the configured remote.
    - If there are staged or unstaged changes from previous work, stage appropriate files and commit with a descriptive message before proceeding.
    - If the local branch is behind the remote, perform a non-interactive fast-forward update if safe; otherwise, pause and inform the user.
  - Avoid committing ignored artifacts (e.g., `venv/`, `.env*`, caches). Respect `.gitignore`.

- **Per-file finalize commit**:
  - Immediately after completing work on a file, commit that file with a focused message, for example:
    - New file: `feat(file): add <path>`
    - Edit: `refactor(file): update <path>` or `fix(file): correct <path>`
    - Docs/rules: `docs(rules): update <path>`
  - Prefer committing only the finalized file(s) rather than using `git add .`.

- **New chat startup checklist**:
  - Read all rules in `.cursor/rules/` to refresh context.
  - Run `git status` and handle pending changes as described above before taking any actions.
  - Ensure Python virtual environment is ready and active:
    - If `venv/` does not exist, create it via `python3 -m venv venv`.
    - Activate with `source venv/bin/activate`.
    - Confirm activation by verifying the shell prompt or `which python` points inside `venv/`.

- **Remote and branch**:
  - Default branch is `main`. Remote should be `origin` set to the project repository.
  - When appropriate and safe, push commits to keep the remote in sync after meaningful milestones; otherwise, keep commits local until the user requests a push.

- **Fail-safe and user notification**:
  - If any automatic step would cause a merge, rebase, or destructive action, stop and ask the user how to proceed.

