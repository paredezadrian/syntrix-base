---
description: Apply Intelligently
globs:
alwaysApply: false
---

# Syntrix-Base Project Structure

This is a CPU-first machine learning framework focused on training small models efficiently on everyday hardware.

## Core Architecture
- **Entry Points**: [cli_train.py](mdc:syntrix/cli_train.py) (`syntrix.train`) and [cli_sample.py](mdc:syntrix/cli_sample.py) (`syntrix.sample`)
- **Main Trainer**: [train.py](mdc:syntrix/train.py) contains the `Trainer` class with training loop
- **Configuration**: [config.py](mdc:syntrix/utils/config.py) handles YAML configs and dataclasses

## Model Architecture
- **GPT Mini**: [gpt_mini.py](mdc:syntrix/models/gpt_mini.py) - compact decoder-only Transformer
- **SSM Mini**: [ssm_mini.py](mdc:syntrix/models/ssm_mini.py) - minimal selective state-space model  
- **RNN Mini**: [rnn_mini.py](mdc:syntrix/models/rnn_mini.py) - gated RNN baseline

## Neural Network Components
- **Layers**: [layers.py](mdc:syntrix/nn/layers.py) - pre-LN, SwiGLU, RMSNorm, rotary embeddings
- **Attention**: [attention.py](mdc:syntrix/nn/attention.py) - fused causal self-attention
- **SSM**: [ssm.py](mdc:syntrix/nn/ssm.py) - selective state-space model implementation
- **RNN**: [rnn.py](mdc:syntrix/nn/rnn.py) - gated RNN implementation

## Utilities
- **Seeding**: [seed.py](mdc:syntrix/utils/seed.py) - deterministic training with thread pinning
- **Profiling**: [profiler.py](mdc:syntrix/utils/profiler.py) - timing and throughput metrics

## Data Pipeline
- **Text Processing**: [text.py](mdc:syntrix/data/text.py) - datasets, tokenizers, memory-mapped iterators
- **Batching**: [collate.py](mdc:syntrix/data/collate.py) - block sampler and microbatch collation

## Optimization
- **Scheduling**: [schedule.py](mdc:syntrix/optim/schedule.py) - cosine learning rate with warmup
- **EMA**: [ema.py](mdc:syntrix/optim/ema.py) - exponential moving average wrapper

## Configuration Files
- **GPT Config**: [gpt-mini.yaml](mdc:configs/gpt-mini.yaml) - default GPT mini configuration
- **SSM Config**: [ssm-mini.yaml](mdc:configs/ssm-mini.yaml) - SSM mini configuration
- **Dataset Config**: [tinyshakespeare.yaml](mdc:configs/tinyshakespeare.yaml) - TinyShakespeare dataset config

## Testing
- **Shape Tests**: [test_shapes.py](mdc:tests/test_shapes.py) - model output shape verification
- **Determinism**: [test_determinism.py](mdc:tests/test_determinism.py) - reproducibility tests
- **CLI Tests**: [test_cli.py](mdc:tests/test_cli.py) - command-line interface testing
