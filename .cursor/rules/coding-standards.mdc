---
description: Coding standards for Syntrix-Base.
---

# Syntrix-Base Coding Standards

## Code Style & Organization
- Use **snake_case** for functions, variables, and files
- Use **PascalCase** for classes
- Use **UPPER_CASE** for constants
- Maximum line length: **88 characters** (black formatter)
- Use **type hints** for all function parameters and return values
- Use **docstrings** for all public functions and classes

## PyTorch Conventions
- Import PyTorch as `import torch`
- Use `torch.nn.functional` for activation functions
- Prefer `torch.nn.Module` inheritance for custom layers
- Use `torch.no_grad()` context for inference/evaluation
- Handle device placement explicitly: `device = next(model.parameters()).device`

## Determinism & Reproducibility
- Always use [seed.py](mdc:syntrix/utils/seed.py) utilities for setting seeds
- Pin BLAS threads using `set_threads()` from seed utilities
- Use fixed random seeds in tests and benchmarks
- Log environment variables (MKL/OMP threads, PyTorch version, Python version)

## Memory & Performance
- Implement **microbatching** for large models
- Use **gradient accumulation** to simulate larger batch sizes
- Control PyTorch threads with `torch.set_num_threads(N)`
- Support both `float32` and `float64` precision modes
- Use `torch.compile` when available (optional optimization)

## Error Handling
- Use descriptive error messages with context
- Validate configuration parameters early
- Handle edge cases gracefully (e.g., empty datasets, NaN losses)
- Log warnings for non-critical issues

## Testing Requirements
- Write tests for all model architectures
- Test determinism with fixed seeds
- Verify output shapes match expected dimensions
- Test CLI interfaces with sample data
- Include integration tests for training loops
